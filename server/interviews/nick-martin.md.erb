---
title: Nick Martin
level: premium
slug: nick-martin
---

## An Interview with Nick Martin

<% note do %>

[Download MP3 (41 mb, 22 min)](https://s3.amazonaws.com/discovermeteor/interviews/DiscoverMeteor-Nick_Martin.mp3)

[Download PDF](https://s3.amazonaws.com/discovermeteor/interviews/DiscoverMeteor-Nick_Martin.pdf)

<% end %>

<%= figure "interviews/nick.jpg", "Nick Martin", "portrait" %>

**Tom Coleman**: I'm here with Nick Martin. One of the founders of Meteor. Thanks so much for joining us, Nick.

**Nick Martin**: Oh, sure, happy to be here.

**Tom**: Cool, tell me about how Meteor got started? How you met the other two guys and the story there?

**Nick**: [laughs] Yeah, it's a good question, it's actually a funny story, not a lot of people know.

### Travel Guides

Matt, Geoff, and I have known each other for a long time, over a decade. We actually worked together on a start up previous to this, a few years ago.

I was in another job. I was working. Geoff and his friend, Jackie, went on vacation to Europe, traveling around Europe. This was back in 2011. They brought an iPad with them.

They found that it was really useful in their traveling. They actually went and they spent a long time getting a data SIM for it, and trying to negotiate in German, which they didn't speak, this whole saga. They eventually got it working, and it was super-amazing to travel with an iPad, really, really useful.

<%= pullquote "We're going to start this company making travel guides for iPads.", "right" %>

Geoff came back, and he came to me and said, "We're going to start this company making travel guides for iPads. It can really revolutionize the travel guide industry." There's no page count, full color pictures but, more importantly, it know where you are. It's got a network. You can do all sorts of amazing things that have never been done with travel guides before.

**Tom**: Sounds great.

**Nick**: I was convinced. I got together with Matt also, same deal, and we started a travel guide company, it was called "Honeycomb Guide". We applied to YCombinator and got in, and went through the YCombinator program, summer 2011.

### Introducing Skybreak

We tried a number of things in our travel guide. We tried a map-focused version, and a friend-focused version where friends recommend things. Nothing quite resonated.

I don't know how much people know about YCombinator but at the end of the summer there's this event, "Demo Day," where you present what you've been working on to investors, sort of a wrap-up for the summer.

<%= pullquote "We looked at each other and said ‘We have nothing.’", "left" %>

A week before "Demo Day" is "Rehearsal Day" where you rehearse the presentation for "Demo Day." On the car ride down the day before rehearsal day, we looked at each other and said "We have nothing. We have worked for two months and we have nothing to show. No users, no money, no content, nothing. "

We decided we would pitch something different. We put together a presentation for, it wasn't called Meteor then, it was called Skybreak. Put together a presentation and figured "Well, we'll talk this up and see what people think. See if it sounds like a good idea and people are interested."

We gave a presentation. Immediately a bunch of other people came up to us and said "Oh, that sounds great. We really want it. When can we have it?"

**Tom**: [laughs]

**Nick**: [laughs] We had to think of something. We said "Well actually, we don't really have any of this. It's just a presentation. But we'll work on it."

**Tom**: Yeah.

**Nick**: We got such a good reaction we said "All right. Let's do this." The core of it was actually the core of what we had built for the travel guide. This Friend-based travel guide was a real time, your friend would pick something out and it would show up on your map, on your screen.

<%= pullquote "We got such a good reaction we said ‘All right. Let's do this.’", "right" %>

We started building this. It wasn't generalized. It wasn't an all-purpose framework.

**Tom**: Sure.

**Nick**: But the core idea was still there.

**Tom**: It wasn't complete back then when you did your presentation? [laughs]

**Nick**: Yeah, that's right. Everyone really liked the idea. We said "All right, we're going to do this." We spent the next eight months actually building it. Renamed from Skybreak to Meteor and then launched it.

### From Skybreak to Meteor

**Tom**: Yeah. The name Meteor, does that have a special meaning, just the obvious associations?

**Nick**: There's actually a really good answer on Quora, if you search. Geoff tells the whole saga. We wanted a name that was easy to spell, easy to remember, sort of science-y. We went down a whole list and spent, really, a very long time agonizing over the name. I originally was not a fan of the name Meteor, but it has grown a lot on me. I think it has ended up being a really great choice and has served us really, really well.

**Tom**: Yeah.

**Nick**: So glad we were able to. There are so many different places you can go, Atmosphere and all the different.

**Tom**: Meteorites.

**Nick**: Yeah, exactly.

**Tom**: It's cool. That's great. I guess since you've launched, this was midway through last year I suppose, when you guys accidentally launched. If I remember correctly.

**Nick**: It was pretty intentional. Certainly, we picked a date and we said all right, we're just going to do it. We're not sure that we will be a 100 percent there. We've been working for eight months now. We're close, we're going to pick a date, two weeks from Tuesday. Make it happen. The screencast was definitely last minute, Matt and Geoff stayed up all night the night before the launch.

<%= pullquote "The screencast was definitely last minute, Matt and Geoff stayed up all night the night before the launch.", "left" %>

**Tom**: Whoa, really?

**Nick**: Yeah. To do the screencast.

**Tom**: Such a great screencast.

**Nick**: Thanks.

### From Toy to Product

**Tom**: I really think that screencast gets a lot of people excited about Meteor. Really does the job. Whoa, intense work process then. What would be a highlight of Meteor to this day? Would it be that launch day and the response you got off it?

**Nick**: Gosh. I don't know if there is one event that's been defining. Just the whole process of watching it grow has been incredibly. Absolutely incredible. I have never been a part of something like this before, it feels really amazing.

<%= pullquote "I have never been a part of something like this before, it feels really amazing.", "left" %>

When we launched, we got other people saying, "Oh, this is a toy, it's a prototype and it doesn't have any authentication." They didn't quite see where it was going. Fair enough, because there wasn't a lot there. As time went on we got the fundraising, people said, "Huh, interesting. Maybe there is something there."

Then we launched Auth. People were like, "Wait a second, now that it's got security and actual separation from multiple users, maybe I could try using this for my project." Then just thing after thing. As the company grows we got more and more people using Meteor, it has been an amazing dream.

I don't know if there is anyone in one particular moment. Launch definitely was pretty heartening. I was afraid people were going to hate it. We had no idea what was going to happen when we launched. We were all just completely amazed by the response we got and how big it was.

<%= pullquote "We were all just completely amazed by the response we got and how big it was.", "right" %>

**Tom**: People are usually pretty positive about the legitimate objections of that. I heard earlier on there was very positive response, wasn't there?

**Nick**: Yeah.

**Tom**: I hope that the highlights keep coming then.

**Nick**: Yeah, me too.

### Exploring a New Galaxy

**Tom**: What are you guys working on right now? What are you developing at the moment, Nick?

<%= pullquote "Right now we've moved pretty much the whole company to focus on building Galaxy.", "right" %>

**Nick**: Right now we've moved pretty much the whole company to focus on building Galaxy. Galaxy is our app hosting platform. Right now we have Meteor Deploy. This is where you can deploy apps for free. Galaxy is sort of a rework of that not held together with bubblegum and duct tape.

But actually, a product you will be able to run on your own, you will be able to have your own Meteor deploy, cloud, your own hardware, or your Amazon account. The same way we made it really easy to write apps with Meteor, we want to make it real easy to run apps with Galaxy.

**Tom**: Right. Awesome. I suppose Galaxy will be in charge of the scaling side of things?

<%= pullquote "We want to make sure you can always run Meteor without Galaxy.", "left" %>

**Nick**: I think there is a lot of the core scaling stuff is in Meteor. We want to make sure you can always run Meteor without Galaxy. They're not going to be so tied together that they have go together. You will be able to scale your Meteor app without Galaxy also. A lot of the process managing around scaling and keeping lots of different Meteor processes running will be Galaxy's role...

**Tom**: Scaling them up and down and that sort of thing.

**Nick**: The core multi process support, being able to run multiple Meteor processes is still going to be in Meteor not Galaxy.

**Tom**: Sure, that makes sense.

### Scaling Matters

Tell me about scaling, because I get a lot of questions about scaling. I'm really interested because I guess there aren't too many large apps out there, right now, that we have hard numbers on. As a developer, what can you tell me about what I should be thinking about in terms of the performance of my app?

**Nick**: Yeah, that's a great question. Scaling is really very app dependent and very dependent on the data load, the way you use data in your queries. Meteor, as it ships, stock, only runs one node process for your app. With only one process, it's taking only one core, and node doesn't do multi-threading, so it's really just one CPU core. There is only so far the app can scale.

<%= pullquote "Some people have worked our system to run multiple Meteor processes behind a proxy with stateful sessions.", "right" %>

If you don't have the hard time constraints, real time constraints, some people have worked our system to run multiple Meteor processes behind a proxy with stateful sessions. That allows you to scale much better horizontally with multiple processes. The restriction there, though, is that an action done by one user on one of the processes won't necessarily show up to any of the other processes for 10 to 15 seconds, which is a delay for how often we poll Mongo.

**Tom**: Right, so the two Meteor processes aren't talking to each other directly?

**Nick**: That's' right, they're just both talking to the same Mongo database and the information flows through there.

**Tom**: Is that something that will change?

### Op Log Tailing

**Nick**: Exactly. With the next, maybe not next, but a big step on the scaling roadmap is to do what we call op log tailing. Mongo has an op log, which is a list of all the write operations that are done and it uses this for replication to stream the changes from the master to the secondary nodes.

**Tom**: Sure.

**Nick**: We can use that same mechanism to see what changes happened and which queries have to be rerun. Right now, whenever a write may have affected the results of a query we rerun the query and diff the results. Not a very efficient strategy at all, but it works. It gets the job done and has gotten us this far.

**Tom**: Right. Sorry, to stop you for a second, practically when I'm developing my app that means that there's a CPU load and it's diffing every time a write may affect an open subscription, is that correct?

**Nick**: That's' right. That's exactly right. A way to think about it and to try to optimize your app to scale better is to try to minimize the writes and queries that overlap. For example, if you have query that includes a specific ID, if you're just looking at one user record and it has a specific ID, writes that specifically have different IDs will not trigger a re-write. That's a way you can isolate different segments and not have them re-polling.

**Tom**: Sure.

**Nick**: Whereas if your write is not limited to a specific ID, any query on that collection will be rerun.

**Tom**: Right, right.

**Nick**: Another factor around that is query duplication. The more you can have subscriptions use the exact same query, the better, because it only holds open one cursor for each query.

**Tom**: So if you have two subscriptions that both end up calling the same cursor, both of those clients will share CPU load?

**Nick**: Exactly.

### RAM vs CPU

**Tom**: Right. What about memory requirements on the server? How does that work?

**Nick**: That's a good question. I don't know if there's anything particularly associated with a lot of memory. Again, it's one process, so however much RAM you have in that one machine is as much as you can use. Meteor does right now keep in memory on a server all of the output from all of the subscriptions to be able to do the diffing. The total sum of all of the data for all of the clients, with deduplication, will be a memory limit.

<%= pullquote "I think generally people tend to hit CPU limits before RAM limits.", "left" %>

But I think generally people tend to hit CPU limits before RAM limits.

**Tom**: Before the RAM limits.

**Nick**: Yeah.

**Tom**: OK, that's interesting. If I'm developing and app and I feel like performance of the app is poor, perhaps I'm doing something wrong, perhaps I need to look at some of these subscription issues that you've mentioned and overlaps with writes, what kind of performance should I expect to see? What would be a red flag?

### Concurrent Users

I know it's very data dependent, but this is a question that I get asked sometimes is on a say, Amazon medium instance, like that amount of CPU power, with a sort of fairly standard app, whatever that means, how many concurrent users should I be able to handle? Do you have an answer for that or is that too hard to say?

**Nick**: Yeah, that's a really tough question because it really depends entirely on the data. I can say with meteor.com, our website, that doesn't use any subscriptions, any data. It does keep open a connection. It keeps the DDP collection alive and it uses methods to subscribe you to the mailing list, I think, and some similar actions. But it's not doing subscriptions and polling Mongo and we've seen thousands of concurrent, tens of thousands in load tests and thousands in actual usage.

**Tom**: Yeah.

**Nick**: That's an upper bound.

**Tom**: That's just a single process that it's running on?

<%= pullquote "Meteor.com is actually hosted on the same Meteor-deployed servers as everyone else's app.", "left" %>

**Nick**: Yup, that's right. Meteor.com is actually hosted on the same Meteor-deployed servers as everyone else's app. It's the same performance you'll get with your deploy.

**Tom**: You don't have any special flags set on?

**Nick**: No, it's actually running on the same machines, same cloud, same everything.

**Tom**: Yeah, right.

**Nick**: We eat our own dog food in that sense. That's an upper bound, tens of thousands of connections. Then, as you start adding more and more data, that starts going down.

**Tom**: Sure.

**Nick**: I wrote a benchmark app that very heavily used data, and I got about three concurrent users, so it really does depends on how data what the data access pattern is.

If you have one Top 10 items, and everyone is just seeing the same Top 10 on all the browsers, that's going to do very well. You'll still get a lot of concurrents. But if every user has their own query or multiple queries, that each send a lot of data items, it starts adding up very quickly.

Especially if you have M square type of problems where any user doing an action causes all the other users to have to re-poll their Mongo queries. That can go south pretty quickly.

### Production Apps

**Tom**: OK, that's great. I think that little nugget of wisdom would be really, really useful for people and probably myself as well. Thanks for that. Are there deployments out there apart from meteor.com that you know of that are large?

**Nick**: Yeah, it sort of open source that people don't have to tell us, but a lot of people do and they talk to us and we've heard from a number of people who are deploying Meteor off EC2, some on Rackspace, some are on hardware. [Gander.io](http://gander.io) is one I know of on top of my head. [Green Cloud](http://gogreencloud.com/) run their customer management dashboard in Meteor… Stream.io…

There is a whole list of projects where people have talked to us, and there's probably a whole lot more that haven't talked to us.

**Tom**: These are production applications that users are using every day, and running into fundamental problems of Meteor.

**Nick**: I hope not. They haven't told us if they are.

### Coming Soom

**Tom**: That's great. That should give people confidence to know that it's not just a toy and people are actually using this for real. Just one final question, what are you most excited about next? Is it when 1.0 comes out, is it something else?

**Nick**: I'm not sure if I have a single thing. I really looking forward to having Galaxy shipped and having people use it. I think that will really clarify a lot of things about Meteor and help the ecosystem shape out. I really looking forward to 1.0, I think that will be a really big milestone and a load off my mind for sure.

Mostly just looking forward to continue to grow, and seeing all these new apps and new users. It's been an incredible path so far and it looks like it's just going to keep on going. That's so exciting, I don't really have words for it. It's going to be a great ride and I'm looking forward to it.

**Tom**: Thanks so much for talking to me, Nick.

**Nick**: Oh sure, thanks. It was a lot of fun. Thanks for doing this.